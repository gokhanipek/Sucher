{"version":3,"sources":["redux/actions.js","components/Search/Search.js","components/Logo/Logo.js","components/Home/Home.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/state.js","redux/reducers/index.js","redux/sagas.js","redux/store.js","index.js"],"names":["receiveApiDataAction","data","type","connect","searchResults","get","dispatch","getSearchRepoRequest","console","warn","useState","searchTerm","setSearchTerm","class","onSubmit","e","preventDefault","query","encodeURIComponent","trim","placeholder","id","onChange","event","target","value","for","name","Logo","classes","useEffect","document","documentElement","addEventListener","eyeMovementAnimation","removeEventListener","querySelectorAll","forEach","x","getBoundingClientRect","left","clientWidth","y","top","clientHeight","rot","Math","atan2","pageX","pageY","PI","style","transform","className","Home","App","Boolean","window","location","hostname","match","initialState","addReducer","state","combineReducers","requestApiData","axios","params","q","sort","order","response","put","log","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","reducer","composeWithDevTools","applyMiddleware","run","mySaga","rootElement","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc586ec1.chunk.js","sourcesContent":["export const GET_SEARCH_REPO_REQUEST = \"GET_SEARCH_REPO_REQUEST\";\r\nexport const GET_SEARCH_REPO_RESPONSE = \"GET_SEARCH_REPO_RESPONSE\";\r\n\r\n\r\nexport const getSearchRepoRequest = () => ({ type: GET_SEARCH_REPO_REQUEST });\r\nexport const receiveApiDataAction = data => ({ type: GET_SEARCH_REPO_RESPONSE, data });\r\n","import React, { useState } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { get } from 'lodash';\r\nimport { getSearchRepoRequest } from '../../redux/actions';\r\n\r\n\r\nconst Search = ({getSearchRepoRequest, searchResults}) => {\r\n    console.warn(searchResults);\r\n    const [ searchTerm, setSearchTerm ] = useState('');\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const query = encodeURIComponent(searchTerm.trim());\r\n        if (query === '') return;\r\n        getSearchRepoRequest(query);\r\n    }\r\n\r\n    const handleChange = event => {\r\n        setSearchTerm(event.target.value);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div class=\"row\">\r\n            <form onSubmit={submitHandler}>\r\n                <div class=\"input-field col s6\">\r\n                <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" onChange={handleChange} />\r\n                <label for=\"first_name\">First Name</label>\r\n                </div>\r\n                <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n                    <i class=\"material-icons right\">send</i>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    getSearchRepoRequest: () => dispatch(getSearchRepoRequest())\r\n})\r\n\r\nconst mapStateToProps = ({data}) => ({ \r\n    searchResults: get(data, 'searchResults.items', [])\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import React, { useEffect } from 'react'\r\nimport './Logo.scss';\r\n\r\nconst Logo = ({classes}) => {\r\n    useEffect(() => {\r\n        document.documentElement.addEventListener('mousemove', eyeMovementAnimation)\r\n        return () => {\r\n          document.documentElement.removeEventListener('mousemove', eyeMovementAnimation);\r\n        }\r\n      }, [])\r\n\r\n      const eyeMovementAnimation = event => {\r\n        let eye = document.querySelectorAll('.eye');\r\n        eye.forEach(e => {\r\n          let x = (e.getBoundingClientRect().left) + (e.clientWidth / 2)\r\n          let y = (e.getBoundingClientRect().top) + (e.clientHeight / 2)\r\n          let radian = Math.atan2(event.pageX - x, event.pageY - y)\r\n          let rot = (radian * (180 / Math.PI) * -1) + 270;\r\n          e.style.transform = \"rotate(\" + rot + \"deg)\";\r\n        })\r\n      }\r\n\r\n    return (\r\n        <div className={`logo-container ${classes}`}>\r\n          <div className=\"face\">\r\n            <div className=\"eyes\">\r\n              <div className=\"eye\"></div>\r\n              <div className=\"eye\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport Search from '../Search/Search';\r\nimport Logo from './../Logo/Logo';\r\n\r\nimport './Home.scss';\r\n\r\nconst Home = () => {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Logo />\r\n            <Search />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    searchResults: {},\r\n};\r\n\r\nexport default initialState;","import initialState from './initialState';\r\n  \r\nfunction addReducer(state = initialState, {type, data}) {\r\n  switch(type) {\r\n    case 'GET_SEARCH_REPO_REQUEST':\r\n      return { ...state };\r\n    case 'GET_SEARCH_REPO_RESPONSE':\r\n      return { ...state, searchResults: data };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default addReducer;\r\n  ","import { combineReducers } from \"redux\";\r\n\r\nimport data from \"./state\";\r\n\r\nexport default combineReducers({\r\n  data\r\n});\r\n","import { put, takeEvery } from \"redux-saga/effects\";\r\n// import { call, put, takeEvery, takeLatest, take } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\n\r\n\r\nimport { \r\n    GET_SEARCH_REPO_REQUEST,\r\n    receiveApiDataAction,\r\n } from \"./actions\";\r\n\r\nexport function* getSearchRepoRequest() {\r\n      try {\r\n        const response = yield axios.get(\"https://api.github.com/search/repositories\",\r\n            {\r\n                params: {\r\n                    q: 'vakaren',\r\n                    sort: 'stars',\r\n                    order: 'desc'\r\n                }\r\n            }\r\n        );\r\n        const { data } = response;\r\n        yield put(receiveApiDataAction(data));\r\n      } catch (e) {\r\n          console.log(e);\r\n      }\r\n};\r\n  \r\n\r\nexport default function* requestApiData() {\r\n  yield takeEvery( GET_SEARCH_REPO_REQUEST, getSearchRepoRequest );\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nimport reducer from \"./reducers\";\r\nimport mySaga from \"./sagas\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(mySaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}