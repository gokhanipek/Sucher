{"version":3,"sources":["redux/actions.js","components/Home.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/state.js","redux/reducers/index.js","redux/sagas.js","redux/store.js","index.js"],"names":["receiveApiDataAction","data","type","connect","state","dispatch","getSearchRepoRequest","useEffect","App","className","Boolean","window","location","hostname","match","initialState","searchResults","addReducer","action","combineReducers","requestApiData","axios","get","response","console","warn","put","log","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","reducer","composeWithDevTools","applyMiddleware","run","mySaga","rootElement","document","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAKaA,EAAuB,SAAAC,GAAI,MAAK,CAAEC,KAJP,2BAIuCD,SCiBhEE,eAHS,SAAAC,GAAK,MAAK,MAHP,SAAAC,GAAQ,MAAI,CACnCC,qBAAsB,kBAAMD,EDbW,CAAEH,KAJN,gCCsBxBC,EAjBF,SAAC,GAA4B,IAA3BG,EAA0B,EAA1BA,qBAIX,OAHAC,qBAAU,WACND,OAGA,yCCEOE,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCdSC,EAJM,CACjBC,cAAe,ICYJC,MAXf,WAAmD,IAA/Bb,EAA8B,uDAAtBW,EAAcG,EAAQ,uCAChD,OAAOA,EAAOhB,MACZ,IAAK,0BACH,OAAO,eAAKE,GACd,IAAK,2BACH,OAAO,2BAAKA,GAAZ,IAAmBY,cAAeE,EAAOjB,OAC3C,QACE,OAAOG,ICLEe,4BAAgB,CAC7Bf,U,oDCKeE,G,WAYQc,GAZlB,SAAUd,IAAV,yEAEkB,OAFlB,kBAEwBe,IAAMC,IAAI,+FAFlC,OAKC,OAHMC,EAFP,OAGCC,QAAQC,KAAKF,EAAStB,MACdA,EAASsB,EAATtB,KAJT,SAKOyB,YAAI1B,EAAqBC,IALhC,yDAOGuB,QAAQG,IAAR,MAPH,sDAYQ,SAAUP,IAAV,iEACb,OADa,SACPQ,YPvB+B,0BOuBKtB,GAD7B,uCCdf,IAAMuB,EAAiBC,cACRC,wBAAYC,EAASC,8BAAoBC,0BAAgBL,KAExEA,EAAeM,IAAIC,GCFnB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFL,GNqHI,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.4ebac37c.chunk.js","sourcesContent":["export const GET_SEARCH_REPO_REQUEST = \"GET_SEARCH_REPO_REQUEST\";\r\nexport const GET_SEARCH_REPO_RESPONSE = \"GET_SEARCH_REPO_RESPONSE\";\r\n\r\n\r\nexport const getSearchRepoRequest = () => ({ type: GET_SEARCH_REPO_REQUEST });\r\nexport const receiveApiDataAction = data => ({ type: GET_SEARCH_REPO_RESPONSE, data });\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { getSearchRepoRequest } from './../redux/actions';\r\n\r\nconst Home = ({getSearchRepoRequest}) => {\r\n    useEffect(() => {\r\n        getSearchRepoRequest();\r\n    })\r\n    return (\r\n        <div>\r\n            hello\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    getSearchRepoRequest: () => dispatch(getSearchRepoRequest())\r\n})\r\nconst mapStateToProps = state => ({ \r\n});\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n  \r\n  ","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    searchResults: {},\r\n};\r\n\r\nexport default initialState;","import initialState from './initialState';\r\n  \r\nfunction addReducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case 'GET_SEARCH_REPO_REQUEST':\r\n      return { ...state };\r\n    case 'GET_SEARCH_REPO_RESPONSE':\r\n      return { ...state, searchResults: action.data };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default addReducer;\r\n  ","import { combineReducers } from \"redux\";\r\n\r\nimport state from \"./state\";\r\n\r\nexport default combineReducers({\r\n  state\r\n});\r\n","import { put, takeEvery } from \"redux-saga/effects\";\r\n// import { call, put, takeEvery, takeLatest, take } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\n\r\n\r\nimport { \r\n    GET_SEARCH_REPO_REQUEST,\r\n    receiveApiDataAction,\r\n } from \"./actions\";\r\n\r\nexport function* getSearchRepoRequest() {\r\n      try {\r\n        const response = yield axios.get(\"https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc\");\r\n        console.warn(response.data);\r\n        const { data } = response;\r\n        yield put(receiveApiDataAction(data));\r\n      } catch (e) {\r\n          console.log(e);\r\n      }\r\n};\r\n  \r\n\r\nexport default function* requestApiData() {\r\n  yield takeEvery( GET_SEARCH_REPO_REQUEST, getSearchRepoRequest );\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nimport reducer from \"./reducers\";\r\nimport mySaga from \"./sagas\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(mySaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}